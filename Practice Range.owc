settings
{
	main
	{
		Description: "Modified Practice Range 2.2 by PMAJellies \n3.3 by Scales #11791 \n3.5 by github.com/Quota \n4.2 by Kocou #21168"
		Mode Name: "Practice Range 4.2"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Max Spectators: 0
		Max Team 1 Players: 1
	}

	modes
	{
		Practice Range

		General
		{
			Game Mode Start: Manual
			Hero Limit: Off
			Respawn Time Scalar: 25%
			Tank Role Passive Health Bonus: Always Enabled
		}
	}

	heroes
	{
		Team 1
		{
			Ability Cooldown Time: 0%
			
			Roadhog
			{
				Take a Breather Recharge Rate: 500%
			}
		}


		Team 2
		{
			Genji
			{
				Deflect Cooldown Time: 0%
			}

			Illari
			{
				Solar Energy Maximum: 500%
				Solar Energy Recharge Rate: 500%
			}

			Moira
			{
				Biotic Energy Maximum: 500%
				Biotic Energy Recharge Rate: 500%
			}

			Reaper
			{
				Shadow Step Cooldown Time: 0%
				Wraith Form Cooldown Time: 0%
			}

			Reinhardt
			{
				Barrier Field Cooldown Time: 0%
				Barrier Field Recharge Rate: 500%
				Charge Cooldown Time: 0%
				Damage Dealt: 10%
				Fire Strike Cooldown Time: 0%
				Spawn With Ultimate Ready: On
				Ultimate Generation - Passive Earthshatter: 500%
				Ultimate Generation Earthshatter: 500%
			}

			Symmetra
			{
				Sentry Turret Cooldown Time: 0%
			}

			Tracer
			{
				Blink Cooldown Time: 0%
				Damage Dealt: 10%
				Recall Cooldown Time: 0%
			}

			Widowmaker
			{
				Grappling Hook Cooldown Time: 0%
			}
		}

		General
		{
			Spawn With Ultimate Ready: On

			D.Va
			{
				Defense Matrix Maximum Time: 500%
				Defense Matrix Recharge Rate: 500%
			}

			Pharah
			{
				Hover Jets Unlimited Fuel: On
			}

			Zarya
			{
				Particle Barrier Cooldown Time: 0%
			}
		}
	}

	extensions
	{
		Beam Effects
	}
}

variables
{
	global:
		0: Tmp
		1: PlayerEventInfo	//[Tmp, Hero, .., .., .., PocketMercy, Lúcio]
		2: Rnd
		11: QRP	//Quadrangular/Rectangular Panel
		32: XXX
		
	player:
		1: Tmp
		2: Rnd
		3: PlayerInfo	//[..., Hero]
}

//-------------------------------------------------------------------------------------------------------------------------

rule("Debug Coords")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Create HUD Text(Event Player, Facing Direction Of(Event Player), Null, Null, Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Eye Position(Event Player), Null, Null, Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Position Of(Event Player), Null, Null, Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
	}
}

disabled rule("RayCast Tool")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Event Player.Tmp = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 100, Null, Event Player, False);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Last Of(Event Player.Tmp), 0.2, None);
		Log To Inspector(Event Player.Tmp);
	}
}

//-------------------------------------------------------------------------------------------------------------------------

rule("Quadrangular Panel (Trigger Base) – Initialization")
{
	event
	{
		Ongoing - Global;
	}
	
	actions
	{
		Global.QRP[0]=Vector(65.86,0.13,25.24);
		Global.QRP[1]=Vector(67.07,0.13,23.54);
		Global.QRP[2]=Vector(67.07,-1.34,23.54);
		Global.QRP[3]=Vector(65.86,-1.34,25.24);

		for Global Variable(Tmp,0,4,1);
			Global.QRP[31]=Global.QRP[Global.Tmp];
			Global.QRP[32]=Global.QRP[Modulo(Global.Tmp+1,4)];
			Create Effect(All Players(All Teams), Sphere, Color(Black), Global.QRP[Global.Tmp], 0.1, Visible To);
			Create Beam Effect(All Players(All Teams), Grapple Beam, Global.QRP[31], Global.QRP[32], Color(White), Visible To);
		end;
	}
}

rule("Quadrangular Panel (Trigger Base) – Trigger")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}
	
	conditions
	{
			(Is Firing Primary(Event Player)==True
	||	Is Firing Secondary(Event Player)==True) == true;
			Distance Between(Position Of(Event Player), Vector(68.76,-2,25.36)) <= 10;
	}
	
	actions
	{
		Global.QRP[11]=0;
		Global.QRP[12]=0;
		Global.QRP[20]=0;
		Global.QRP[31]=0;
		Global.QRP[32]=0;
		Global.QRP[33]=0;
		
		
		Global.QRP[5]=Eye Position(Event Player);
		Global.QRP[6]=Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 100, Null, Event Player, False);
		Global.QRP[7]=Facing Direction Of(Event Player);
		
		
		Global.QRP[11]=Cross Product(Global.QRP[1]-Global.QRP[0],Global.QRP[2]-Global.QRP[0]);
		if (Dot Product(Global.QRP[7],Global.QRP[11])>0);
			Global.QRP[99]=Global.QRP[0];
			Global.QRP[0]=Global.QRP[3];
			Global.QRP[3]=Global.QRP[99];
			Global.QRP[99]=Global.QRP[1];
			Global.QRP[1]=Global.QRP[2];
			Global.QRP[2]=Global.QRP[99];
Log To Inspector(Custom String("Reverse"));
		end;
		
		Global.QRP[11]=Cross Product(Global.QRP[1]-Global.QRP[0],Global.QRP[2]-Global.QRP[0]);

		if (Dot Product(Global.QRP[7],Global.QRP[11])==0);
			Log To Inspector(Custom String("Ray is parallel to the plane, no intersection"));	//▒
			abort;
		end;
		
		Global.QRP[12]=Dot Product(Global.QRP[0]-Global.QRP[5],Global.QRP[11])/Dot Product(Global.QRP[7],Global.QRP[11]);
		if (Global.QRP[12]<0);
			Log To Inspector(Custom String("Intersection point is behind the ray"));	//▒
			abort;
		end;
		
		Global.QRP[20]=Global.QRP[5]+Global.QRP[7]*Global.QRP[12];
		
		for Player Variable(Event Player,Tmp,0,4,1);
			Global.QRP[31]=Global.QRP[Event Player.Tmp];
			Global.QRP[32]=Global.QRP[Modulo(Event Player.Tmp+1,4)];
			Global.QRP[33]=Cross Product(Global.QRP[32]-Global.QRP[31],Global.QRP[20]-Global.QRP[31]);
			if (Dot Product(Global.QRP[33],Global.QRP[11])<0);
				Log To Inspector(Custom String("Intersection point is outside the polygon"));	//▒
				abort;
			end;
		end;
		
		
		Global.QRP[99]=Global.QRP[20];
		Create Effect(All Players(All Teams), Sphere, Color(Red), Global.QRP[99], 0.1, Visible To);

Log To Inspector(Custom String("---------------------------------"));
Log To Inspector(Custom String("0: {0}",Global.QRP[99]));
Log To Inspector(Custom String("A: {0}",Global.QRP[0]));
Log To Inspector(Custom String("B: {0}",Global.QRP[1]));
Log To Inspector(Custom String("C: {0}",Global.QRP[2]));
Log To Inspector(Custom String("D: {0}",Global.QRP[3]));
Log To Inspector(Custom String("S: {0}",Global.QRP[5]));
Log To Inspector(Custom String("H: {0}",Global.QRP[6]));
Log To Inspector(Custom String("D: {0}",Global.QRP[7]));
Log To Inspector(Custom String("Normal: {0}",Global.QRP[11]));
Log To Inspector(Custom String("t: {0}",Global.QRP[12]));
Log To Inspector(Custom String("Intersects: {0}",Global.QRP[20]));
Log To Inspector(Custom String("---------------------------------"));

	}
}